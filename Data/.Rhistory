x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
colnames(coint) <- "spread"
error <- spread_jo - mean(spread_jo)
threshold <- stdevs*(sd(spread_jo) - mean(spread_jo))
coint$long_wti <- coint$spread < -threshold
coint$long_brent <- coint$spread > threshold
coint$position_wti <- 0
coint$position_brent <- 0
for(i in 1:dim(coint)[1]){
if(coint$long_wti[i] == 1) {
if(sign(coint$position_wti[i-1]) != 1) {
coint$position_wti[i] <- coint$position_wti[i-1] + 1
coint$position_brent[i] <- coint$position_brent[i-1] + x_val
}
}
if(coint$long_brent[i] == 1) {
if(sign(coint$position_brent[i-1]) != -1) {
coint$position_wti[i] <- coint$position_wti[i-1] - 1
coint$position_brent[i] <- coint$position_brent[i-1] - x_val
}
}
}
# Calculate portfolio value
coint$wti_value <- coint$position_wti*y
coint$brent_value <- coint$position_brent*(x*-x_val)
coint$portfolio_value <- coint$wti_value + coint$brent_value
# Calculate change in value
coint$wti_delta <- diff.xts(coint$wti_value)
coint$brent_delta <- diff.xts(coint$brent_value)
# Calculate returns
coint$brent_returns <- diff.xts(coint$brent_value)/lag.xts(coint$brent_value)
coint$wti_returns <- diff.xts(coint$wti_value)/lag.xts(coint$wti_value)
coint$portfolio_returns <- coint$wti_returns - coint$brent_returns
return(coint)
}
trades <- trade_determine(price,.5)
summary(trades)
autoplot(trades$position_wti)
cumsum(trades$portfolio_returns)
autoplot(cumsum(trades$portfolio_returns))
knitr::opts_chunk$set(echo = FALSE, include=FALSE,
warning = FALSE, error = FALSE, message = FALSE)
# Libraries
library(tidyverse)
library(xts)
library(urca)
library(tseries)
library(tidyquant)
# Functions
create_xts <- function(df) {
df <- xts(df$price, df$date)
return(df)
}
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
brent_spread <- xts(brent_spread[,2:3], brent_spread$date)
brent_spread$spread <- brent_spread$ask - brent_spread$bid
wti_spread <- read_csv("../raw/WTIbidask-daily.csv")
wti_spread$date <- parse_date(wti_spread$date, "%m/%d/%Y")
wti_spread <- xts(wti_spread[,2:3], wti_spread$date)
wti_spread$spread <- wti_spread$ask - wti_spread$bid
spread <- na.omit(merge(wti_spread, brent_spread))
colnames(spread) <- c("w.ask", "w.bid", "w.spread",
"b.ask", "b.bid", "b.spread")
price <- na.omit(merge(wti, brent))
# Format total dataframe in OLS format
p_tib <- as_tibble(price)
p_tib <- mutate(p_tib,
wti.dl1 = diff.xts(wti),
brent.dl1 = diff.xts(brent),
wti.l1  = lag.xts(wti),
brent.l1 = lag.xts(brent),
constant = 1)
p_tib <- xts(p_tib, order.by = index(price))["1995/"]
test_set <- price["2015-07-15/"]
# Remove mismatched time series and remove NA
price <- price["1995/2015-07-14"]
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length", format = 'pandoc')
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
summarise_adf <- function(adf) {
adf_sum <- c(adf$statistic, adf$p.value)
names(adf_sum) <- c("Augmented Dickey-Fulley Statistic", "P Value")
return(adf_sum)
}
wti_adf_summary <- summarise_adf(wti_adf)
brent_adf_summary <- summarise_adf(brent_adf)
adf_table <- t(data.frame(wti_adf_summary, brent_adf_summary))
row.names(adf_table) <- c("WTI", "Brent")
knitr::kable(adf_table, caption = "Augmented Dickey-Fuller Summary",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=2)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- "$\\epsilon$"
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept ($\\alpha$)",
"Brent ($\\beta_1$)",
"Residuals ($\\epsilon$)")
knitr::kable(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
knitr::kable(eg_coef, caption = "Engle-Granger Error Correction Model Summary",
format = 'pandoc')
# Test OLS stuff
ass1 <- "$\\text{E}(\\epsilon_t)=0$"
ass2 <- "$\\text{var}(u_t)=\\sigma^2 < \\infinity$"
white <- white.test(as.ts(eg$residuals))
ass3 <- "$\\text{cov}(u_t, u_j)=0$"
ass4 <- "$\\text{cov}(u_t,x_t) = 0$"
ass5 <- "$u_t ~ N(0, \\sigma^2)$"
row1 <- c(ass1, paste("Residual mean is ", mean(eg$residuals)))
row2 <- c(ass1, paste("White test pvalue is ", white$p.value))
fitted = xts(eg_correction$fitted.values,
order.by = as.Date(names(eg_correction$fitted.values)))
colnames(fitted) <- "Fitted"
joc <- ca.jo(price, type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
summary(joc)
# Turn Johansen into an OLS equation, plot results
jocols <- cajools(joc)
# Graph the spread
range = '2005/'
autoplot(price$brent[range] - price$wti[range]) +
ylab("Spread") +
ggtitle("Brent/WTI Spread")
new_predictions <- as_xts(predict(jocols, newdata = p_tib['2015-07-15/']))
index(new_predictions) <- as.Date(index(new_predictions))
actual_diff <- diff.xts(p_tib[,1:2])['2015-07-15/']
ggplot() +
geom_line(mapping = aes(x=index(new_predictions), y=brent.d), color = "red",
data = new_predictions) +
geom_line(mapping = aes(x=index(actual_diff), y=brent),
data = actual_diff)
# Cointegrated via Engle-Granger
spread <- (p_tib$wti.l1 - eg_coef[2]*p_tib$brent.l1)/eg_coef[3]
res <- na.omit(lag(eg$residuals))
res2 <- eg$coefficients[1] + eg$coefficients[2]*p_tib$brent
res3 <-
autoplot(spread)
ggplot() +
geom_histogram(mapping = aes(res), bins = 500)
autoplot(spread)
joc@V
make_cointegrated <- function() {
y = p_tib$wti.l1
x = p_tib$brent.l1
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
return(coint)
}
spread_jo <- make_cointegrated()
autoplot(spread_jo)
error_jo <- spread_jo - mean(spread_jo)
trade_jo <- sd(spread_jo) - mean(spread_jo)
trade_determine <- function(df, stdevs=1) {
y = df$wti
x = df$brent
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
colnames(coint) <- "spread"
error <- spread_jo - mean(spread_jo)
threshold <- stdevs*(sd(spread_jo) - mean(spread_jo))
coint$long_wti <- coint$spread < -threshold
coint$long_brent <- coint$spread > threshold
coint$position_wti <- 0
coint$position_brent <- 0
for(i in 1:dim(coint)[1]){
if(coint$long_wti[i] == 1) {
if(sign(coint$position_wti[i-1]) != 1) {
coint$position_wti[i] <- coint$position_wti[i-1] + 1
coint$position_brent[i] <- coint$position_brent[i-1] + x_val
}
}
if(coint$long_brent[i] == 1) {
if(sign(coint$position_brent[i-1]) != -1) {
coint$position_wti[i] <- coint$position_wti[i-1] - 1
coint$position_brent[i] <- coint$position_brent[i-1] - x_val
}
}
}
# Calculate portfolio value
coint$wti_value <- coint$position_wti*y
coint$brent_value <- coint$position_brent*(x*-x_val)
coint$portfolio_value <- coint$wti_value + coint$brent_value
# Calculate change in value
coint$wti_delta <- diff.xts(coint$wti_value)
coint$brent_delta <- diff.xts(coint$brent_value)
# Calculate returns
coint$brent_returns <- diff.xts(coint$brent_value)/lag.xts(coint$brent_value)
coint$wti_returns <- diff.xts(coint$wti_value)/lag.xts(coint$wti_value)
coint$portfolio_returns <- coint$wti_returns - coint$brent_returns
return(coint)
}
trades <- trade_determine(price,.5)
summary(trades)
head(trades['2008-01-01/'])
error_jo <- spread_jo - mean(spread_jo)
trade_jo <- sd(spread_jo) - mean(spread_jo)
trade_determine <- function(df, stdevs=1) {
y = df$wti
x = df$brent
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
colnames(coint) <- "spread"
error <- spread_jo - mean(spread_jo)
threshold <- stdevs*(sd(spread_jo) - mean(spread_jo))
coint$long_wti <- coint$spread < -threshold
coint$long_brent <- coint$spread > threshold
coint$position_wti <- 0
coint$position_brent <- 0
for(i in 1:dim(coint)[1]){
if(coint$long_wti[i] == 1) {
if(sign(coint$position_wti[i-1]) != 1) {
coint$position_wti[i] <- coint$position_wti[i-1] + 1
coint$position_brent[i] <- coint$position_brent[i-1] + x_val
}
}
if(coint$long_brent[i] == 1) {
if(sign(coint$position_brent[i-1]) != -1) {
coint$position_wti[i] <- coint$position_wti[i-1] - 1
coint$position_brent[i] <- coint$position_brent[i-1] - x_val
}
}
}
# Calculate portfolio value
coint$wti_value <- coint$position_wti*y
coint$brent_value <- coint$position_brent*(x*-x_val)
coint$portfolio_value <- coint$wti_value + coint$brent_value
# Calculate change in value
coint$wti_delta <- diff.xts(coint$wti_value)
coint$brent_delta <- diff.xts(coint$brent_value)
# Calculate returns
coint$brent_returns <- diff.xts(coint$brent_value)/lag.xts(coint$brent_value)
coint$wti_returns <- diff.xts(coint$wti_value)/lag.xts(coint$wti_value)
coint$portfolio_returns <- coint$wti_returns - coint$brent_returns
return(coint)
}
trades <- trade_determine(price,2)
summary(trades)
error_jo <- spread_jo - mean(spread_jo)
trade_jo <- sd(spread_jo) - mean(spread_jo)
trade_determine <- function(df, stdevs=1) {
y = df$wti
x = df$brent
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
colnames(coint) <- "spread"
error <- spread_jo - mean(spread_jo)
threshold <- stdevs*(sd(spread_jo) - mean(spread_jo))
coint$long_wti <- coint$spread < -threshold
coint$long_brent <- coint$spread > threshold
coint$position_wti <- 0
coint$position_brent <- 0
for(i in 1:dim(coint)[1]){
if(coint$long_wti[i] == 1) {
if(sign(coint$position_wti[i-1]) != 1) {
coint$position_wti[i] <- coint$position_wti[i-1] + 1
coint$position_brent[i] <- coint$position_brent[i-1] + x_val
}
}
if(coint$long_brent[i] == 1) {
if(sign(coint$position_brent[i-1]) != -1) {
coint$position_wti[i] <- coint$position_wti[i-1] - 1
coint$position_brent[i] <- coint$position_brent[i-1] - x_val
}
}
}
# Calculate portfolio value
coint$wti_value <- coint$position_wti*y
coint$brent_value <- coint$position_brent*(x*-x_val)
coint$portfolio_value <- coint$wti_value + coint$brent_value
# Calculate change in value
coint$wti_delta <- diff.xts(coint$wti_value)
coint$brent_delta <- diff.xts(coint$brent_value)
# Calculate returns
coint$brent_returns <- diff.xts(coint$brent_value)/lag.xts(coint$brent_value)
coint$wti_returns <- diff.xts(coint$wti_value)/lag.xts(coint$wti_value)
coint$portfolio_returns <- coint$wti_returns - coint$brent_returns
return(coint)
}
trades <- trade_determine(price,0.5)
summary(trades)
hist(spread_jo, breaks=20)
hist(spread_jo, breaks=200)
1/joc@V[2,1]
autoplot(trades$position_brent)
autoplot(trades$position_wti)
knitr::opts_chunk$set(echo = FALSE, include=FALSE,
warning = FALSE, error = FALSE, message = FALSE)
# Libraries
library(tidyverse)
library(xts)
library(urca)
library(tseries)
library(tidyquant)
# Functions
create_xts <- function(df) {
df <- xts(df$price, df$date)
return(df)
}
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
brent_spread <- xts(brent_spread[,2:3], brent_spread$date)
brent_spread$spread <- brent_spread$ask - brent_spread$bid
wti_spread <- read_csv("../raw/WTIbidask-daily.csv")
wti_spread$date <- parse_date(wti_spread$date, "%m/%d/%Y")
wti_spread <- xts(wti_spread[,2:3], wti_spread$date)
wti_spread$spread <- wti_spread$ask - wti_spread$bid
spread <- na.omit(merge(wti_spread, brent_spread))
colnames(spread) <- c("w.ask", "w.bid", "w.spread",
"b.ask", "b.bid", "b.spread")
price <- na.omit(merge(wti, brent))
# Format total dataframe in OLS format
p_tib <- as_tibble(price)
p_tib <- mutate(p_tib,
wti.dl1 = diff.xts(wti),
brent.dl1 = diff.xts(brent),
wti.l1  = lag.xts(wti),
brent.l1 = lag.xts(brent),
constant = 1)
p_tib <- xts(p_tib, order.by = index(price))["1995/"]
test_set <- price["2015-07-15/"]
# Remove mismatched time series and remove NA
price <- price["1995/2015-07-14"]
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length", format = 'pandoc')
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
summarise_adf <- function(adf) {
adf_sum <- c(adf$statistic, adf$p.value)
names(adf_sum) <- c("Augmented Dickey-Fulley Statistic", "P Value")
return(adf_sum)
}
wti_adf_summary <- summarise_adf(wti_adf)
brent_adf_summary <- summarise_adf(brent_adf)
adf_table <- t(data.frame(wti_adf_summary, brent_adf_summary))
row.names(adf_table) <- c("WTI", "Brent")
knitr::kable(adf_table, caption = "Augmented Dickey-Fuller Summary",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=2)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- "$\\epsilon$"
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept ($\\alpha$)",
"Brent ($\\beta_1$)",
"Residuals ($\\epsilon$)")
knitr::kable(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
knitr::kable(eg_coef, caption = "Engle-Granger Error Correction Model Summary",
format = 'pandoc')
# Test OLS stuff
ass1 <- "$\\text{E}(\\epsilon_t)=0$"
ass2 <- "$\\text{var}(u_t)=\\sigma^2 < \\infinity$"
white <- white.test(as.ts(eg$residuals))
ass3 <- "$\\text{cov}(u_t, u_j)=0$"
ass4 <- "$\\text{cov}(u_t,x_t) = 0$"
ass5 <- "$u_t ~ N(0, \\sigma^2)$"
row1 <- c(ass1, paste("Residual mean is ", mean(eg$residuals)))
row2 <- c(ass1, paste("White test pvalue is ", white$p.value))
fitted = xts(eg_correction$fitted.values,
order.by = as.Date(names(eg_correction$fitted.values)))
colnames(fitted) <- "Fitted"
joc <- ca.jo(price, type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
summary(joc)
# Turn Johansen into an OLS equation, plot results
jocols <- cajools(joc)
# Graph the spread
range = '2005/'
autoplot(price$brent[range] - price$wti[range]) +
ylab("Spread") +
ggtitle("Brent/WTI Spread")
new_predictions <- as_xts(predict(jocols, newdata = p_tib['2015-07-15/']))
index(new_predictions) <- as.Date(index(new_predictions))
actual_diff <- diff.xts(p_tib[,1:2])['2015-07-15/']
ggplot() +
geom_line(mapping = aes(x=index(new_predictions), y=brent.d), color = "red",
data = new_predictions) +
geom_line(mapping = aes(x=index(actual_diff), y=brent),
data = actual_diff)
# Cointegrated via Engle-Granger
spread <- (p_tib$wti.l1 - eg_coef[2]*p_tib$brent.l1)/eg_coef[3]
res <- na.omit(lag(eg$residuals))
res2 <- eg$coefficients[1] + eg$coefficients[2]*p_tib$brent
res3 <-
autoplot(spread)
ggplot() +
geom_histogram(mapping = aes(res), bins = 500)
autoplot(spread)
joc@V
make_cointegrated <- function() {
y = p_tib$wti.l1
x = p_tib$brent.l1
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
return(coint)
}
spread_jo <- make_cointegrated()
autoplot(spread_jo)
error_jo <- spread_jo - mean(spread_jo)
trade_jo <- sd(spread_jo) - mean(spread_jo)
trade_determine <- function(df, stdevs=1) {
y = df$wti
x = df$brent
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
colnames(coint) <- "spread"
error <- spread_jo - mean(spread_jo)
threshold <- stdevs*(sd(spread_jo) - mean(spread_jo))
coint$long_wti <- coint$spread < -threshold
coint$long_brent <- coint$spread > threshold
coint$position_wti <- 0
coint$position_brent <- 0
for(i in 1:dim(coint)[1]){
if(coint$long_wti[i] == 1) {
if(sign(coint$position_wti[i-1]) != 1) {
coint$position_wti[i] <- coint$position_wti[i-1] + 1
coint$position_brent[i] <- coint$position_brent[i-1] + x_val
}
}
if(coint$long_brent[i] == 1) {
if(sign(coint$position_brent[i-1]) != -1) {
coint$position_wti[i] <- coint$position_wti[i-1] - 1
coint$position_brent[i] <- coint$position_brent[i-1] - x_val
}
}
}
# Calculate portfolio value
coint$wti_value <- coint$position_wti*y
coint$brent_value <- coint$position_brent*(x*-x_val)
coint$portfolio_value <- coint$wti_value + coint$brent_value
# Calculate change in value
coint$wti_delta <- diff.xts(coint$wti_value)
coint$brent_delta <- diff.xts(coint$brent_value)
# Calculate returns
coint$brent_returns <- diff.xts(coint$brent_value)/lag.xts(coint$brent_value)
coint$wti_returns <- diff.xts(coint$wti_value)/lag.xts(coint$wti_value)
coint$portfolio_returns <- coint$wti_returns - coint$brent_returns
return(coint)
}
trades <- trade_determine(price,0.5)
summary(trades)
head(trades['2008-01-01/'])
head(trades)
sign(0)
