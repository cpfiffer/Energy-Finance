return(coint)
}
spread_jo <- make_cointegrated()
ggplot() +
geom_line(mapping=aes(index(spread_jo), 1), color = 'lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), -1), color='lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), spread_jo)) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
sum(buy_hold$trade_made)
sum(buy_always$trade_made)
mean(buy_always$portfolio_returns)
mean(buy_always$portfolio_returns, na.rm=TRUE)
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), -0.3), color='lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), spread_jo)) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
make_cointegrated <- function() {
y = p_tib$wti.l1
x = p_tib$brent.l1
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
return(coint)
}
spread_jo <- make_cointegrated()
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), -0.3), color='lightblue', size=1) +
geom_line(mapping=aes(index(spread_jo), spread_jo)) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'darkblue') +
geom_line(mapping=aes(index(spread_jo), -0.3), color='darkblue') +
geom_line(mapping=aes(index(spread_jo), spread_jo)) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
white <- white.test(as.ts(eg$residuals))
# Test OLS stuff
ass1 <- "$\\text{E}(\\epsilon_t)=0$"
ass2 <- "$\\text{var}(u_t)=\\sigma^2 < \\infinity$"
white <- white.test(as.ts(eg$residuals))
ass3 <- "$\\text{cov}(u_t, u_j)=0$"
ass4 <- "$\\text{cov}(u_t,x_t) = 0$"
ass5 <- "$u_t ~ N(0, \\sigma^2)$"
row1 <- c(ass1, paste("Residual mean is ", mean(eg$residuals)))
row2 <- c(ass1, paste("White test pvalue is ", white$p.value))
knitr::kable(adf_table, caption = "Augmented Dickey-Fuller Summary",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=2)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- "$\\epsilon$"
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept ($\\alpha$)",
"Brent ($\\beta_1$)",
"Residuals ($\\epsilon$)")
knitr::kable(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=2)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- ""
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept",
"Brent",
"Residuals")
knitr::kable(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
xtable(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
pander(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
# Present Johansen results
pander(joc)
joc
summary(joc)
joc@V
joc@V[,1]
pander(joc@V[,1])
pander(joc@V[,1], )
o <- joc@V[,1]
# Present Johansen results
o <- joc@V[,1]
row.names(o) <- "Cointegrating Vector"
# Present Johansen results
o <- data.frame(joc@V[,1])
row.names(o) <- "Cointegrating Vector"
o
o <- t(data.frame(joc@V[,1]))
o
row.names(o) <- "Cointegrating Vector"
pander(o)
# Present Johansen results
o <- t(data.frame(joc@V[,1]))
colnames(o) <- c("WTI",
"Brent",
"Constant")
row.names(o) <- "Cointegrating Vector"
pander(o)
joc@V[,1]
pander(o)
knitr::opts_chunk$set(echo = FALSE, include=FALSE,
warning = FALSE, error = FALSE, message = FALSE)
# Libraries
library(tidyverse)
library(xts)
library(urca)
library(tseries)
library(tidyquant)
library(pander)
library(feather)
library(extrafont)
options(scipen=8)
# Functions
create_xts <- function(df) {
df <- xts(df$price, df$date)
return(df)
}
create_xts2 <- function(df) {
# Use for bid/ask datasets
df <- xts(df[,2:3], order.by=df$date)
return(df)
}
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
# Now we import bid/ask spreads and some other stuff.
bidask_brent <- read_csv("../raw/BFObidask-daily.csv")
bidask_brent$date <- parse_date(bidask_brent$date, "%m/%d/%Y")
bidask_brent <- create_xts2(bidask_brent)
bidask_brent$spread <- bidask_brent$ask - bidask_brent$bid
bidask_wti <- read_csv("../raw/WTIbidask-daily.csv")
bidask_wti$date <- parse_date(bidask_wti$date, "%m/%d/%Y")
bidask_wti <- create_xts2(bidask_wti)
bidask_wti$spread <- bidask_wti$ask-bidask_wti$bid
bidask_spread <- merge(bidask_wti, bidask_brent)
colnames(bidask_spread) <- c("w.ask", "w.bid", "w.spread",
"b.ask", "b.bid", "b.spread")
price <- na.omit(merge(wti, brent, bidask_spread))
# Format total dataframe in OLS format
p_tib <- as_tibble(price)
p_tib <- mutate(p_tib,
wti.dl1 = diff.xts(wti),
brent.dl1 = diff.xts(brent),
wti.l1  = lag.xts(wti),
brent.l1 = lag.xts(brent),
constant = 1)
p_tib <- xts(p_tib, order.by = index(price))["1995/"]
test_set <- price["2015-07-15/"]
# Remove mismatched time series and remove NA
price <- price["1995/2015-07-14"]
# Process benchmark data
snp <- read_csv("../raw/snp.csv")
snp$date <- as.Date(snp$date, "%m/%d/%Y")
snp <- xts(snp$snp, order.by = snp$date)
colnames(snp) <- "snp"
snp2 <- snp["2015-07-15/"]
snp <- snp["1995/2015-07-14"]
snp$portfolio_returns <- (snp$snp-lag(snp$snp))/lag.xts(snp$snp)
snp$log_returns <- log(snp$snp/lag.xts(snp$snp))
snp$portfolio_value <- (snp$snp * 217.813) #100000/first snp price
snp$portfolio_value[[1]] <- 100000
snp2$portfolio_returns <- (snp2$snp-lag(snp2$snp))/lag.xts(snp2$snp)
snp2$log_returns <- log(snp2$snp/lag.xts(snp2$snp))
snp2$portfolio_value <- (snp2$snp * 47.45184) #100000/first snp price
snp2$portfolio_value[[1]] <- 100000
# Process RF data
risk_free <- read_csv("../raw/askyield.csv")
risk_free$date <- as.Date(risk_free$date, "%m/%d/%Y")
risk_free <- xts(risk_free$askyield, order.by = risk_free$date)
colnames(risk_free) <- "askyield"
risk_free$daily <- log(((1+risk_free$askyield/100))^(1/250))
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length", format = 'pandoc')
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
summarise_adf <- function(adf) {
adf_sum <- c(adf$statistic, adf$p.value)
names(adf_sum) <- c("Augmented Dickey-Fulley Statistic", "P Value")
return(adf_sum)
}
wti_adf_summary <- summarise_adf(wti_adf)
brent_adf_summary <- summarise_adf(brent_adf)
adf_table <- t(data.frame(wti_adf_summary, brent_adf_summary))
row.names(adf_table) <- c("WTI", "Brent")
knitr::kable(adf_table, caption = "Augmented Dickey-Fuller Summary",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=2)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- ""
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept",
"Brent",
"Residuals")
pander(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
knitr::kable(eg_coef, caption = "Engle-Granger Error Correction Model Summary",
format = 'pandoc')
joc <- ca.jo(price[,1:2], type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
# Present Johansen results
o <- t(data.frame(joc@V[,1]))
colnames(o) <- c("WTI",
"Brent",
"Constant")
row.names(o) <- "Cointegrating Vector"
pander(o)
make_cointegrated <- function() {
y = p_tib$wti.l1
x = p_tib$brent.l1
if( dim(joc@V)[1] > 2) {
const = joc@V[3,1]
} else {
const = 0
}
y_val = joc@V[1,1]
x_val = joc@V[2,1]
coint = y*y_val + x*x_val + const
return(coint)
}
spread_jo <- make_cointegrated()
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'darkblue') +
geom_line(mapping=aes(index(spread_jo), -0.3), color='darkblue') +
geom_line(mapping=aes(index(spread_jo), spread_jo)) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
error_jo <- spread_jo - mean(spread_jo)
trade_jo <- sd(spread_jo) - mean(spread_jo)
source('C:/Users/cpfif/Documents/R/Energy Finance/Data/tradefunction2.R')
# In sample
buy_always <- trade_determine2(price, 0.3, 100000, 100)
buy_hold <- buy_and_hold(price, 0.3, 100000, 5000)
# Out of sample
buy_always2 <- trade_determine2(test_set, 0.3, 100000, 100)
buy_hold2 <- buy_and_hold(test_set, 0.3, 100000, 5000)
#write.zoo(buy_always, "../raw/buy_always.csv", sep=',')
#write.zoo(buy_hold, "../raw/buy_hold.csv", sep=',')
#write.zoo(buy_always2, "../raw/buy_always2.csv", sep=',')
#write.zoo(buy_hold2, "../raw/buy_hold2.csv", sep=',')
#source('C:/Users/cpfif/Documents/R/Energy Finance/Data/tradefunction2.R')
#buy_always <- xts(read.csv.zoo("raw/buy_always.csv"))
#buy_hold <- xts(read.csv.zoo("raw/buy_hold.csv"))
#buy_always2 <- xts(read.csv.zoo("raw/buy_always2.csv"))
#buy_hold2 <- xts(read.csv.zoo("raw/buy_hold2.csv"))
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
summarize_strategy <- function(df, threshold = 999, type="NA") {
start = df$portfolio_value[[1]]
terminal = df$portfolio_value[[dim(df)[1]]]
log_ret = log(terminal/start)
geomean = gm_mean(df$portfolio_returns)
smallest = min(df$portfolio_value)
largest = max(df$portfolio_value)
sharpe_ratio = sharp(df$portfolio_returns)
start=prettyNum(start,big.mark=',')
summary=data.frame(start, terminal, log_ret, geomean, smallest, sharpe_ratio)
return(summary)
}
ali <- summarize_strategy(buy_always, 0.3, type="Buy every day")
hoi <- summarize_strategy(buy_hold, 0.3, type="Buy every day")
ssi <- summarize_strategy(snp)
summary_table <- rbind(ali,hoi, ssi)
row.names(summary_table) <- c("Accumulate position",
"Buy and hold",
"S&P 500")
colnames(summary_table) <- c("Initial Wealth",
"Terminal Wealth",
"Log Return",
"Geometric Return",
"Minimum Value",
"Sharpe Ratio")
set.alignment('right', row.names = 'left')
pander(summary_table,
caption="Strategy Performance In Sample (January 1st, 1995-July 13th, 2015)",
format = 'pandoc',
style='multiline',
split.cells=10,
big.mark=',')
alo <- summarize_strategy(buy_always2, 0.3, type="Buy every day")
hoo <- summarize_strategy(buy_hold2, 0.3, type="Buy every day")
sso <- summarize_strategy(snp2)
summary_table <- rbind(alo,hoo, sso)
row.names(summary_table) <- c("Accumulate position",
"Buy and hold",
"S&P 500")
colnames(summary_table) <- c("Initial Wealth",
"Terminal Wealth",
"Log Return",
"Geometric Return",
"Minimum Value",
"Sharpe Ratio")
set.alignment('right', row.names = 'left')
pander(summary_table,
caption="Strategy Performance Out of Sample (July 14th, 2015-July 14th, 2017)",
format = 'pandoc',
style='multiline',
split.cells=10,
big.mark=',')
ggplot() +
geom_line(mapping=aes(index(buy_always), buy_always$portfolio_value), color='orange') +
geom_line(mapping=aes(index(buy_always), buy_hold$portfolio_value), color = 'darkblue') +
geom_line(mapping=aes(index(snp), snp$portfolio_value), color='black') +
scale_y_continuous(labels=scales::dollar_format()) +
theme_minimal() +
xlab("Date") +
ylab("Portfolio Value")
ggplot() +
geom_line(mapping=aes(index(buy_always2), buy_always2$portfolio_value), color='orange') +
geom_line(mapping=aes(index(buy_always2), buy_hold2$portfolio_value), color = 'darkblue') +
geom_line(mapping=aes(index(snp2), snp2$portfolio_value), color='black') +
scale_y_continuous(labels=scales::dollar_format()) +
theme_minimal() +
xlab("Date") +
ylab("Portfolio Value")
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'darkblue') +
geom_line(mapping=aes(index(spread_jo), -0.3), color='darkblue') +
geom_line(mapping=aes(index(spread_jo), spread_jo), size=0.1) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
ggplot() +
geom_line(mapping=aes(index(spread_jo), 0.3), color = 'darkblue') +
geom_line(mapping=aes(index(spread_jo), -0.3), color='darkblue') +
geom_line(mapping=aes(index(spread_jo), spread_jo), size=0.01) +
xlab("Date") +
ylab("Spread") +
theme_minimal()
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
install.packages("purrr")
install.packages("purrr")
library(tidyverse)
ll_table
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
ll_table <- ll_table[-4]
ll_table
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
ll_table <- ll_table[-4,]
ll_table
ll_table <-
ll_table[-4]
ll_table <-
ll_table[-4]
ll_table[-4]
ll_table[1]
ll_table[1,]
ll_table[2,]
ll_table[-3]
lag_length
lag_length$selection
lag_length$selection[04]
lag_length$selection[-4]
ll_talbe
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection[-4])
ll_table
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length", format = 'pandoc')
wti_adf <- adf.test(price$wti, k=5)
brent_adf <- adf.test(price$brent, k=5)
summarise_adf <- function(adf) {
adf_sum <- c(adf$statistic, adf$p.value)
names(adf_sum) <- c("Augmented Dickey-Fulley Statistic", "P Value")
return(adf_sum)
}
wti_adf_summary <- summarise_adf(wti_adf)
brent_adf_summary <- summarise_adf(brent_adf)
adf_table <- t(data.frame(wti_adf_summary, brent_adf_summary))
row.names(adf_table) <- c("WTI", "Brent")
adf_table
knitr::kable(adf_table, caption = "Augmented Dickey-Fuller Summary",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=5)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- ""
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept",
"Brent",
"Residuals")
eg_coef
# Present Johansen results
o <- t(data.frame(joc@V[,1]))
colnames(o) <- c("WTI",
"Brent",
"Constant")
row.names(o) <- "Cointegrating Vector"
pander(o)
joc@P
joc@cval
pander(joc@cval)
joc@teststat
vals <- joc@cval
merge(vals, joc@teststat)
joc@teststat
summary(joc)
merge(vals, joc@teststat, by.x)
?merge
pander(vals)
pander(eg_coef, caption = "Engle-Granger Error Correction Model Summary",
format = 'pandoc')
vals
vals <- joc@cval
vals$test <- joc@teststat
vals
pander(vals)
vals
str(joc@cval)
vals <- data.frame(joc@cval)
vals
vals$test <- joc@teststat
vals
pander(vals)
?pander
summary(joc)
vals <- data.frame(joc@cval)
vals$test <- joc@teststat
colnames(vals) <- c("10%", "5%", "1%", "Test Statistic")
pander(vals, colname)
pander(vals)
vals <- data.frame(joc@cval)
vals$test <- joc@teststat
colnames(vals) <- c("10%", "5%", "1%", "Test Statistic")
rownames(vals) <- c("r <= 1", "r = 0")
pander(vals)
pander(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
eg <- lm(formula = (wti) ~ (brent), data = price)
eg_adf <- adf.test(eg$residuals, k=5)
eg_dat <- data.frame(diff(price$wti), diff(price$brent), lag(eg$residuals))
eg_correction <- lm(wti ~ brent + lag.eg.residuals.,
na.action = na.omit,data = eg_dat)
epsilon <- data.frame(eg_adf$statistic, eg_adf$p.value)
colnames(epsilon) <- c("Augmented Dickey-Fulley Statistic", "P Value")
row.names(epsilon) <- ""
eg_summary <- summary(eg_correction)
eg_coef <- eg_summary$coefficients
row.names(eg_coef) <- c("Intercept",
"Brent",
"Residuals")
pander(epsilon, caption = "Engle-Granger Residuals Test",
format = 'pandoc')
# Present Johansen results
o <- t(data.frame(joc@V[,1]))
colnames(o) <- c("WTI",
"Brent",
"Constant")
row.names(o) <- "Cointegrating Vector"
pander(o, format='pandoc')
vals <- data.frame(joc@cval)
vals$test <- joc@teststat
colnames(vals) <- c("10%", "5%", "1%", "Test Statistic")
rownames(vals) <- c("r <= 1", "r = 0")
pander(vals, format='pandoc', caption = "Johansen Test Statistics")
# Present Johansen results
o <- t(data.frame(joc@V[,1]))
colnames(o) <- c("WTI",
"Brent",
"Constant")
row.names(o) <- "Cointegrating Vector"
pander(o, format='pandoc', caption = "Johansen Cointegration Vector")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
warnings()
