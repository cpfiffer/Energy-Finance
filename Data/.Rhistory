wti <- create_xts(wti)
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
library(vars)
lag_length <- VARselect(price, type = 'const')
lag_length$selection
adf.test(price$wti)
adf.test(price$brent)
johansen <- ca.jo(price, type = 'eigen', ecdet = 'none',
K = 2, spec = 'transitory')
summary(johansen)
s1 <- xts(price %*% johansen@V[,1], order.by = index(price))
s2 <- xts(price %*% johansen@V[,2], order.by = index(price))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, s2), color = 'red', data = fortify(s2))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, s2*0), color = 'red', data = fortify(s2))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, (price$brent - price$wti)), color = 'red', data = fortify(s2))
joc <- ca.jo(price, type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
summary(joc)
# Graph the spread
range = '2005/'
autoplot(price$brent[range] - price$wti[range]) +
ylab("Spread") +
ggtitle("Brent/WTI Spread")
# Add constant to dataset
pricecon <- price
pricecon$constant <- rep(1)
sc1 <- xts(pricecon %*% joc@V[,1], order.by = index(price))
sc2 <- xts(pricecon %*% joc@V[,2], order.by = index(price))
sc3 <- xts(pricecon %*% joc@V[,3], order.by = index(price))
ggplot() +
geom_line(mapping = aes(Index, sc1), color = 'blue', data = fortify(sc1)) +
geom_line(mapping = aes(Index, sc2), color = 'red', data = fortify(sc2)) +
geom_line(mapping = aes(Index, sc3), color = 'purple', data = fortify(sc3))
ggplot() +
geom_line(mapping = aes(Index, sc1), color = 'blue', data = fortify(sc1)) +
geom_line(mapping = aes(Index, (price$brent - price$wti)), color = 'red', data = fortify(sc2))
varc <- vars::vec2var(joc)
subjo <- ca.jo(price['2010/2015'], type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
substationary <- xts(pricecon['2010/'] %*% subjo@V[,1],
order.by = index(pricecon['2010/']))
ggplot() +
geom_line(mapping = aes(Index, substationary), color = 'blue',
data = fortify(substationary)) +
geom_line(mapping = aes(Index, (price$brent['2010/'] - price$wti['2010/'])),
color = 'red', data = fortify(substationary))
varcs <- vars::vec2var(subjo)
tail(price)
write.csv(price, "prices.csv")
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price)
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
write.csv(price,"prices2.csv")
write.csv(fortify(price),"prices2.csv")
knitr::opts_chunk$set(echo = FALSE, include=FALSE)
# Libraries
library(tidyverse)
library(xts)
library(urca)
library(tseries)
# Functions
create_xts <- function(df) {
df <- xts(df$price, df$date)
return(df)
}
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
library(vars)
lag_length <- VARselect(price, type = 'const')
lag_length$selection
adf.test(price$wti)
adf.test(price$brent)
johansen <- ca.jo(price, type = 'eigen', ecdet = 'none',
K = 2, spec = 'transitory')
summary(johansen)
s1 <- xts(price %*% johansen@V[,1], order.by = index(price))
s2 <- xts(price %*% johansen@V[,2], order.by = index(price))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, s2), color = 'red', data = fortify(s2))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, s2*0), color = 'red', data = fortify(s2))
ggplot() +
geom_line(mapping = aes(Index, s1), color = 'blue', data = fortify(s1)) +
geom_line(mapping = aes(Index, (price$brent - price$wti)), color = 'red', data = fortify(s2))
joc <- ca.jo(price, type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
summary(joc)
# Graph the spread
range = '2005/'
autoplot(price$brent[range] - price$wti[range]) +
ylab("Spread") +
ggtitle("Brent/WTI Spread")
# Add constant to dataset
pricecon <- price
pricecon$constant <- rep(1)
sc1 <- xts(pricecon %*% joc@V[,1], order.by = index(price))
sc2 <- xts(pricecon %*% joc@V[,2], order.by = index(price))
sc3 <- xts(pricecon %*% joc@V[,3], order.by = index(price))
ggplot() +
geom_line(mapping = aes(Index, sc1), color = 'blue', data = fortify(sc1)) +
geom_line(mapping = aes(Index, sc2), color = 'red', data = fortify(sc2)) +
geom_line(mapping = aes(Index, sc3), color = 'purple', data = fortify(sc3))
ggplot() +
geom_line(mapping = aes(Index, sc1), color = 'blue', data = fortify(sc1)) +
geom_line(mapping = aes(Index, (price$brent - price$wti)), color = 'red', data = fortify(sc2))
varc <- vars::vec2var(joc)
subjo <- ca.jo(price['2010/2015'], type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
substationary <- xts(pricecon['2010/'] %*% subjo@V[,1],
order.by = index(pricecon['2010/']))
ggplot() +
geom_line(mapping = aes(Index, substationary), color = 'blue',
data = fortify(substationary)) +
geom_line(mapping = aes(Index, (price$brent['2010/'] - price$wti['2010/'])),
color = 'red', data = fortify(substationary))
varcs <- vars::vec2var(subjo)
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/2010"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
length(price)
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
length(price)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
head(brent_spread)
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
# Data import, cleaning, consolidation.
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
brent <- create_xts(brent)
wti <- read_csv("../raw/WTI.csv")
wti$date <- parse_date(wti$date, "%d/%m/%Y")
wti <- create_xts(wti)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%d/%m/%Y")
price <- merge(wti, brent)
# Remove mismatched time series and remove NA
price <- na.omit(price["1995/"])
# Days without new prices for each day across both assets = 400
#mismatch = length(price) - length(na.omit(price))
head(brent_spread)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
head(brent_spread)
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
head(brent_spread)
brent_spread <- create_xts(brent_spread)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
brent_spread <- create_xts(brent_spread)
head(brent_spread)
xts(brent_spread)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
xts(brent_spread)
# Libraries
library(tidyverse)
library(xts)
library(urca)
library(tseries)
xts(brent_spread, order.by = brent_spread$date)
wti
brent <- read_csv("../raw/BFO.csv")
brent$date <- parse_date(brent$date, "%d/%m/%Y")
head(brent)
head(brent_spread)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
brent_spread <- create_xts(brent_spread)
brent_spread <- xts(brent_spread[,2:3], brent_spread$date)
brent_spread <- read_csv("../raw/BFObidask-daily.csv")
brent_spread$date <- parse_date(brent_spread$date, "%m/%d/%Y")
brent_spread <- xts(brent_spread[,2:3], brent_spread$date)
head(brent_spread)
wti_spread <- read_csv("../raw/WTIbidask-daily.csv")
wti_spread$date <- parse_date(wti_spread$date, "%m/%d/%Y")
wti_spread <- xts(wti_spread[,2:3], wti_spread$date)
wti_spread
brent_spread$spread <- brent_spread$ask - brent_spread$bid
head(brent_spread)
wti_spread$spread <- wti_spread$ask - wti_spread$bid
tail(wti_spread)
mean(wti_spread)
summary(wti_spread)
summary(brent_spread)
length(brent_spread)
length(wti_spread)
spread <- merge(wti_spread, brent_spread)
head(spread)
?merge
colnames(spread) <- c("w.ask", "w.bid", "w.spread",
"b.ask", "b.bid", "b.spread")
head(spread)
autoplot(spread)
autplot(spread$b.spread - spread$w.spread)
autoplot(spread$b.spread - spread$w.spread)
head(wti_spread)
knitr::kable(summary(price))
test <- summary(price)
test$wti
test
summary)test
summary(test)
str(test)
?summary
joc <- ca.jo(price, type = 'eigen', ecdet = 'const',
K = 2, spec = 'transitory')
knitr::kable(summary(joc))
knitr::kable(joc)
spread <- na.omit(merge(wti_spread, brent_spread))
length(spread)
dim((spread))
dim((price))
tail(spread)
tail(price)
head(price)
head(spread)
colnames(spread) <- c("w.ask", "w.bid", "w.spread",
"b.ask", "b.bid", "b.spread")
colnames(spread) <- c("w.ask", "w.bid", "w.spread",
head(spread)
ggplot() +
geom_line(mapping = aes(price$wti, price$date))
ggplot() +
geom_line(mapping = aes(price$wti, index(price)))
ggplot() +
geom_line(mapping = aes(index(price), price$wti))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread(w.ask) color = 'red'))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread(w.ask)) color = 'red')
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask) color = 'red')
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red')
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
scale_x_date(limits = as.Date("2017-01-01", "2017-01-10"))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
scale_x_date(limits = as.Date("2016-01-01", "2017-01-10"))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
scale_x_continuous(limits = as.Date("2016-01-01", "2017-01-10"))
scale_x_contin
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
scale_x_date(limits = as.Date("2016-01-01", "2017-01-10"))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
scale_x_date(limits = as.Date("2016-01-01", "2017-01-10"))
?scale_x_date
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date("2016-01-01", "2017-01-10"))
as.Date("2016-01-01", "2017-01-10")
as.Date(c("2016-01-01", "2017-01-10"))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date(c("2016-01-01", "2017-01-10")))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date(c("2017-01-01", "2017-01-10")))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date(c("2017-01-01", "2017-01-10"))) +
coord_cartesian(ylim=c(45,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date(c("2017-01-01", "2017-01-10"))) +
coord_cartesian(ylim=c(50,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
xlim(as.Date(c("2017-01-03", "2017-01-10"))) +
coord_cartesian(ylim=c(50,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
geom_line(mapping = aes(index(spread), spread$w.bid), color = 'blue') +
xlim(as.Date(c("2017-01-03", "2017-01-10"))) +
coord_cartesian(ylim=c(50,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
geom_line(mapping = aes(index(spread), spread$w.bid), color = 'blue') +
xlim(as.Date(c("2017-01-03", "2017-03-10"))) +
coord_cartesian(ylim=c(50,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
geom_line(mapping = aes(index(spread), spread$w.bid), color = 'blue') +
xlim(as.Date(c("2017-01-03", "2017-03-10"))) +
coord_cartesian(ylim=c(50,55))
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
geom_line(mapping = aes(index(spread), spread$w.bid), color = 'blue') +
xlim(as.Date(c("2017-01-03", "2017-03-10"))) +
coord_cartesian(ylim=c(50,55))
```{r include=TRUE,error=FALSE,message=FALSE,warning=FALSE}
ggplot() +
geom_line(mapping = aes(index(price), price$wti)) +
geom_line(mapping = aes(index(spread), spread$w.ask), color = 'red') +
geom_line(mapping = aes(index(spread), spread$w.bid), color = 'blue') +
xlim(as.Date(c("2017-01-03", "2017-03-10"))) +
coord_cartesian(ylim=c(50,55))
install.packages("xtable")
library(vars)
lag_length <- VARselect(price, type = 'const')
knitr::kable(lag_length$selection)
lag_length$selection
?VARselect
ll_table <- lag_length$selection
str(ll_table)
knitr::kable(ll_table)
?kable
ll_table
ll_table[1]
names(ll_table)
knitr::kable(ll_table, colnames = names(ll_table))
data.frame(ll_table)
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, colnames = names(ll_table))
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table)
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length")
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length")
knitr::kable(ll_table)
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table)
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length")
?kable
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length")
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length")
library(vars)
lag_length <- VARselect(price, type = 'const')
ll_table <- data.frame(lag_length$selection)
knitr::kable(ll_table)
knitr::kable(ll_table, col.names = "Lag Length", caption = "Information Criteria Lag Length")
?kable
?VARselect
?ca.jo
head(price)
adf.test(price$wti)
test <- adf.test(price$wti)
test$statistic
test$parameter
test$p.value
?adf.test
test <- adf.test(price$wti, k=2)
test$p.value
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
wti_adf
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
for(i in 1:30) {
pvals = adf.test(price$brent, k=i)$p.value
}
pvals
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
for(i in 1:30) {
pvals[i] = adf.test(price$brent, k=i)$p.value
}
pvals
wti_adf <- adf.test(price$wti, k=2)
brent_adf <- adf.test(price$brent, k=2)
for(i in 1:30) {
pvals[i] = adf.test(price$wti, k=i)$p.value
}
pvals
